// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package runner

import (
	context "context"
	io "io"

	dto "gitlab.hpi.de/codeocean/codemoon/poseidon/pkg/dto"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RunnerMock is an autogenerated mock type for the Runner type
type RunnerMock struct {
	mock.Mock
}

// Destroy provides a mock function with given fields:
func (_m *RunnerMock) Destroy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteInteractively provides a mock function with given fields: id, stdin, stdout, stderr
func (_m *RunnerMock) ExecuteInteractively(id string, stdin io.ReadWriter, stdout io.Writer, stderr io.Writer) (<-chan ExitInfo, context.CancelFunc, error) {
	ret := _m.Called(id, stdin, stdout, stderr)

	var r0 <-chan ExitInfo
	if rf, ok := ret.Get(0).(func(string, io.ReadWriter, io.Writer, io.Writer) <-chan ExitInfo); ok {
		r0 = rf(id, stdin, stdout, stderr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan ExitInfo)
		}
	}

	var r1 context.CancelFunc
	if rf, ok := ret.Get(1).(func(string, io.ReadWriter, io.Writer, io.Writer) context.CancelFunc); ok {
		r1 = rf(id, stdin, stdout, stderr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.CancelFunc)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, io.ReadWriter, io.Writer, io.Writer) error); ok {
		r2 = rf(id, stdin, stdout, stderr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecutionExists provides a mock function with given fields: id
func (_m *RunnerMock) ExecutionExists(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *RunnerMock) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MappedPorts provides a mock function with given fields:
func (_m *RunnerMock) MappedPorts() []*dto.MappedPort {
	ret := _m.Called()

	var r0 []*dto.MappedPort
	if rf, ok := ret.Get(0).(func() []*dto.MappedPort); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.MappedPort)
		}
	}

	return r0
}

// ResetTimeout provides a mock function with given fields:
func (_m *RunnerMock) ResetTimeout() {
	_m.Called()
}

// SetupTimeout provides a mock function with given fields: duration
func (_m *RunnerMock) SetupTimeout(duration time.Duration) {
	_m.Called(duration)
}

// StopTimeout provides a mock function with given fields:
func (_m *RunnerMock) StopTimeout() {
	_m.Called()
}

// StoreExecution provides a mock function with given fields: id, executionRequest
func (_m *RunnerMock) StoreExecution(id string, executionRequest *dto.ExecutionRequest) {
	_m.Called(id, executionRequest)
}

// TimeoutPassed provides a mock function with given fields:
func (_m *RunnerMock) TimeoutPassed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateFileSystem provides a mock function with given fields: request
func (_m *RunnerMock) UpdateFileSystem(request *dto.UpdateFileSystemRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.UpdateFileSystemRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
