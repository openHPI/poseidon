// Code generated by mockery v2.9.4. DO NOT EDIT.

package environment

import (
	dto "github.com/openHPI/poseidon/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	runner "github.com/openHPI/poseidon/internal/runner"
)

// ManagerMock is an autogenerated mock type for the Manager type
type ManagerMock struct {
	mock.Mock
}

// CreateOrUpdate provides a mock function with given fields: id, request
func (_m *ManagerMock) CreateOrUpdate(id dto.EnvironmentID, request dto.ExecutionEnvironmentRequest) (bool, error) {
	ret := _m.Called(id, request)

	var r0 bool
	if rf, ok := ret.Get(0).(func(dto.EnvironmentID, dto.ExecutionEnvironmentRequest) bool); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.EnvironmentID, dto.ExecutionEnvironmentRequest) error); ok {
		r1 = rf(id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ManagerMock) Delete(id dto.EnvironmentID) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(dto.EnvironmentID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.EnvironmentID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id, fetch
func (_m *ManagerMock) Get(id dto.EnvironmentID, fetch bool) (runner.ExecutionEnvironment, error) {
	ret := _m.Called(id, fetch)

	var r0 runner.ExecutionEnvironment
	if rf, ok := ret.Get(0).(func(dto.EnvironmentID, bool) runner.ExecutionEnvironment); ok {
		r0 = rf(id, fetch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runner.ExecutionEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.EnvironmentID, bool) error); ok {
		r1 = rf(id, fetch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: fetch
func (_m *ManagerMock) List(fetch bool) ([]runner.ExecutionEnvironment, error) {
	ret := _m.Called(fetch)

	var r0 []runner.ExecutionEnvironment
	if rf, ok := ret.Get(0).(func(bool) []runner.ExecutionEnvironment); ok {
		r0 = rf(fetch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]runner.ExecutionEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(fetch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields:
func (_m *ManagerMock) Load() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
