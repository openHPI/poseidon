// Code generated by mockery v2.21.0. DO NOT EDIT.

package nomad

import (
	context "context"

	api "github.com/hashicorp/nomad/api"
	config "github.com/openHPI/poseidon/internal/config"

	dto "github.com/openHPI/poseidon/pkg/dto"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ExecutorAPIMock is an autogenerated mock type for the ExecutorAPI type
type ExecutorAPIMock struct {
	mock.Mock
}

type ExecutorAPIMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutorAPIMock) EXPECT() *ExecutorAPIMock_Expecter {
	return &ExecutorAPIMock_Expecter{mock: &_m.Mock}
}

// DeleteJob provides a mock function with given fields: jobID
func (_m *ExecutorAPIMock) DeleteJob(jobID string) error {
	ret := _m.Called(jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutorAPIMock_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type ExecutorAPIMock_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - jobID string
func (_e *ExecutorAPIMock_Expecter) DeleteJob(jobID interface{}) *ExecutorAPIMock_DeleteJob_Call {
	return &ExecutorAPIMock_DeleteJob_Call{Call: _e.mock.On("DeleteJob", jobID)}
}

func (_c *ExecutorAPIMock_DeleteJob_Call) Run(run func(jobID string)) *ExecutorAPIMock_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutorAPIMock_DeleteJob_Call) Return(err error) *ExecutorAPIMock_DeleteJob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutorAPIMock_DeleteJob_Call) RunAndReturn(run func(string) error) *ExecutorAPIMock_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// EventStream provides a mock function with given fields: ctx
func (_m *ExecutorAPIMock) EventStream(ctx context.Context) (<-chan *api.Events, error) {
	ret := _m.Called(ctx)

	var r0 <-chan *api.Events
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan *api.Events, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *api.Events); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *api.Events)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_EventStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventStream'
type ExecutorAPIMock_EventStream_Call struct {
	*mock.Call
}

// EventStream is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ExecutorAPIMock_Expecter) EventStream(ctx interface{}) *ExecutorAPIMock_EventStream_Call {
	return &ExecutorAPIMock_EventStream_Call{Call: _e.mock.On("EventStream", ctx)}
}

func (_c *ExecutorAPIMock_EventStream_Call) Run(run func(ctx context.Context)) *ExecutorAPIMock_EventStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ExecutorAPIMock_EventStream_Call) Return(_a0 <-chan *api.Events, _a1 error) *ExecutorAPIMock_EventStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorAPIMock_EventStream_Call) RunAndReturn(run func(context.Context) (<-chan *api.Events, error)) *ExecutorAPIMock_EventStream_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: jobID, ctx, command, tty, stdin, stdout, stderr
func (_m *ExecutorAPIMock) Execute(jobID string, ctx context.Context, command string, tty bool, stdin io.Reader, stdout io.Writer, stderr io.Writer) (int, error) {
	ret := _m.Called(jobID, ctx, command, tty, stdin, stdout, stderr)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, context.Context, string, bool, io.Reader, io.Writer, io.Writer) (int, error)); ok {
		return rf(jobID, ctx, command, tty, stdin, stdout, stderr)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context, string, bool, io.Reader, io.Writer, io.Writer) int); ok {
		r0 = rf(jobID, ctx, command, tty, stdin, stdout, stderr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, context.Context, string, bool, io.Reader, io.Writer, io.Writer) error); ok {
		r1 = rf(jobID, ctx, command, tty, stdin, stdout, stderr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ExecutorAPIMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - jobID string
//   - ctx context.Context
//   - command string
//   - tty bool
//   - stdin io.Reader
//   - stdout io.Writer
//   - stderr io.Writer
func (_e *ExecutorAPIMock_Expecter) Execute(jobID interface{}, ctx interface{}, command interface{}, tty interface{}, stdin interface{}, stdout interface{}, stderr interface{}) *ExecutorAPIMock_Execute_Call {
	return &ExecutorAPIMock_Execute_Call{Call: _e.mock.On("Execute", jobID, ctx, command, tty, stdin, stdout, stderr)}
}

func (_c *ExecutorAPIMock_Execute_Call) Run(run func(jobID string, ctx context.Context, command string, tty bool, stdin io.Reader, stdout io.Writer, stderr io.Writer)) *ExecutorAPIMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(context.Context), args[2].(string), args[3].(bool), args[4].(io.Reader), args[5].(io.Writer), args[6].(io.Writer))
	})
	return _c
}

func (_c *ExecutorAPIMock_Execute_Call) Return(_a0 int, _a1 error) *ExecutorAPIMock_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorAPIMock_Execute_Call) RunAndReturn(run func(string, context.Context, string, bool, io.Reader, io.Writer, io.Writer) (int, error)) *ExecutorAPIMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteCommand provides a mock function with given fields: jobID, ctx, command, tty, privilegedExecution, stdin, stdout, stderr
func (_m *ExecutorAPIMock) ExecuteCommand(jobID string, ctx context.Context, command string, tty bool, privilegedExecution bool, stdin io.Reader, stdout io.Writer, stderr io.Writer) (int, error) {
	ret := _m.Called(jobID, ctx, command, tty, privilegedExecution, stdin, stdout, stderr)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, context.Context, string, bool, bool, io.Reader, io.Writer, io.Writer) (int, error)); ok {
		return rf(jobID, ctx, command, tty, privilegedExecution, stdin, stdout, stderr)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context, string, bool, bool, io.Reader, io.Writer, io.Writer) int); ok {
		r0 = rf(jobID, ctx, command, tty, privilegedExecution, stdin, stdout, stderr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, context.Context, string, bool, bool, io.Reader, io.Writer, io.Writer) error); ok {
		r1 = rf(jobID, ctx, command, tty, privilegedExecution, stdin, stdout, stderr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_ExecuteCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCommand'
type ExecutorAPIMock_ExecuteCommand_Call struct {
	*mock.Call
}

// ExecuteCommand is a helper method to define mock.On call
//   - jobID string
//   - ctx context.Context
//   - command string
//   - tty bool
//   - privilegedExecution bool
//   - stdin io.Reader
//   - stdout io.Writer
//   - stderr io.Writer
func (_e *ExecutorAPIMock_Expecter) ExecuteCommand(jobID interface{}, ctx interface{}, command interface{}, tty interface{}, privilegedExecution interface{}, stdin interface{}, stdout interface{}, stderr interface{}) *ExecutorAPIMock_ExecuteCommand_Call {
	return &ExecutorAPIMock_ExecuteCommand_Call{Call: _e.mock.On("ExecuteCommand", jobID, ctx, command, tty, privilegedExecution, stdin, stdout, stderr)}
}

func (_c *ExecutorAPIMock_ExecuteCommand_Call) Run(run func(jobID string, ctx context.Context, command string, tty bool, privilegedExecution bool, stdin io.Reader, stdout io.Writer, stderr io.Writer)) *ExecutorAPIMock_ExecuteCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(context.Context), args[2].(string), args[3].(bool), args[4].(bool), args[5].(io.Reader), args[6].(io.Writer), args[7].(io.Writer))
	})
	return _c
}

func (_c *ExecutorAPIMock_ExecuteCommand_Call) Return(_a0 int, _a1 error) *ExecutorAPIMock_ExecuteCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorAPIMock_ExecuteCommand_Call) RunAndReturn(run func(string, context.Context, string, bool, bool, io.Reader, io.Writer, io.Writer) (int, error)) *ExecutorAPIMock_ExecuteCommand_Call {
	_c.Call.Return(run)
	return _c
}

// JobScale provides a mock function with given fields: jobID
func (_m *ExecutorAPIMock) JobScale(jobID string) (uint, error) {
	ret := _m.Called(jobID)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint, error)); ok {
		return rf(jobID)
	}
	if rf, ok := ret.Get(0).(func(string) uint); ok {
		r0 = rf(jobID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_JobScale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobScale'
type ExecutorAPIMock_JobScale_Call struct {
	*mock.Call
}

// JobScale is a helper method to define mock.On call
//   - jobID string
func (_e *ExecutorAPIMock_Expecter) JobScale(jobID interface{}) *ExecutorAPIMock_JobScale_Call {
	return &ExecutorAPIMock_JobScale_Call{Call: _e.mock.On("JobScale", jobID)}
}

func (_c *ExecutorAPIMock_JobScale_Call) Run(run func(jobID string)) *ExecutorAPIMock_JobScale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutorAPIMock_JobScale_Call) Return(jobScale uint, err error) *ExecutorAPIMock_JobScale_Call {
	_c.Call.Return(jobScale, err)
	return _c
}

func (_c *ExecutorAPIMock_JobScale_Call) RunAndReturn(run func(string) (uint, error)) *ExecutorAPIMock_JobScale_Call {
	_c.Call.Return(run)
	return _c
}

// LoadEnvironmentJobs provides a mock function with given fields:
func (_m *ExecutorAPIMock) LoadEnvironmentJobs() ([]*api.Job, error) {
	ret := _m.Called()

	var r0 []*api.Job
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*api.Job, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*api.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Job)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_LoadEnvironmentJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadEnvironmentJobs'
type ExecutorAPIMock_LoadEnvironmentJobs_Call struct {
	*mock.Call
}

// LoadEnvironmentJobs is a helper method to define mock.On call
func (_e *ExecutorAPIMock_Expecter) LoadEnvironmentJobs() *ExecutorAPIMock_LoadEnvironmentJobs_Call {
	return &ExecutorAPIMock_LoadEnvironmentJobs_Call{Call: _e.mock.On("LoadEnvironmentJobs")}
}

func (_c *ExecutorAPIMock_LoadEnvironmentJobs_Call) Run(run func()) *ExecutorAPIMock_LoadEnvironmentJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutorAPIMock_LoadEnvironmentJobs_Call) Return(_a0 []*api.Job, _a1 error) *ExecutorAPIMock_LoadEnvironmentJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorAPIMock_LoadEnvironmentJobs_Call) RunAndReturn(run func() ([]*api.Job, error)) *ExecutorAPIMock_LoadEnvironmentJobs_Call {
	_c.Call.Return(run)
	return _c
}

// LoadJobList provides a mock function with given fields:
func (_m *ExecutorAPIMock) LoadJobList() ([]*api.JobListStub, error) {
	ret := _m.Called()

	var r0 []*api.JobListStub
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*api.JobListStub, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*api.JobListStub); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.JobListStub)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_LoadJobList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadJobList'
type ExecutorAPIMock_LoadJobList_Call struct {
	*mock.Call
}

// LoadJobList is a helper method to define mock.On call
func (_e *ExecutorAPIMock_Expecter) LoadJobList() *ExecutorAPIMock_LoadJobList_Call {
	return &ExecutorAPIMock_LoadJobList_Call{Call: _e.mock.On("LoadJobList")}
}

func (_c *ExecutorAPIMock_LoadJobList_Call) Run(run func()) *ExecutorAPIMock_LoadJobList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutorAPIMock_LoadJobList_Call) Return(list []*api.JobListStub, err error) *ExecutorAPIMock_LoadJobList_Call {
	_c.Call.Return(list, err)
	return _c
}

func (_c *ExecutorAPIMock_LoadJobList_Call) RunAndReturn(run func() ([]*api.JobListStub, error)) *ExecutorAPIMock_LoadJobList_Call {
	_c.Call.Return(run)
	return _c
}

// LoadRunnerIDs provides a mock function with given fields: prefix
func (_m *ExecutorAPIMock) LoadRunnerIDs(prefix string) ([]string, error) {
	ret := _m.Called(prefix)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_LoadRunnerIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadRunnerIDs'
type ExecutorAPIMock_LoadRunnerIDs_Call struct {
	*mock.Call
}

// LoadRunnerIDs is a helper method to define mock.On call
//   - prefix string
func (_e *ExecutorAPIMock_Expecter) LoadRunnerIDs(prefix interface{}) *ExecutorAPIMock_LoadRunnerIDs_Call {
	return &ExecutorAPIMock_LoadRunnerIDs_Call{Call: _e.mock.On("LoadRunnerIDs", prefix)}
}

func (_c *ExecutorAPIMock_LoadRunnerIDs_Call) Run(run func(prefix string)) *ExecutorAPIMock_LoadRunnerIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutorAPIMock_LoadRunnerIDs_Call) Return(runnerIds []string, err error) *ExecutorAPIMock_LoadRunnerIDs_Call {
	_c.Call.Return(runnerIds, err)
	return _c
}

func (_c *ExecutorAPIMock_LoadRunnerIDs_Call) RunAndReturn(run func(string) ([]string, error)) *ExecutorAPIMock_LoadRunnerIDs_Call {
	_c.Call.Return(run)
	return _c
}

// LoadRunnerJobs provides a mock function with given fields: environmentID
func (_m *ExecutorAPIMock) LoadRunnerJobs(environmentID dto.EnvironmentID) ([]*api.Job, error) {
	ret := _m.Called(environmentID)

	var r0 []*api.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.EnvironmentID) ([]*api.Job, error)); ok {
		return rf(environmentID)
	}
	if rf, ok := ret.Get(0).(func(dto.EnvironmentID) []*api.Job); ok {
		r0 = rf(environmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.EnvironmentID) error); ok {
		r1 = rf(environmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_LoadRunnerJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadRunnerJobs'
type ExecutorAPIMock_LoadRunnerJobs_Call struct {
	*mock.Call
}

// LoadRunnerJobs is a helper method to define mock.On call
//   - environmentID dto.EnvironmentID
func (_e *ExecutorAPIMock_Expecter) LoadRunnerJobs(environmentID interface{}) *ExecutorAPIMock_LoadRunnerJobs_Call {
	return &ExecutorAPIMock_LoadRunnerJobs_Call{Call: _e.mock.On("LoadRunnerJobs", environmentID)}
}

func (_c *ExecutorAPIMock_LoadRunnerJobs_Call) Run(run func(environmentID dto.EnvironmentID)) *ExecutorAPIMock_LoadRunnerJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.EnvironmentID))
	})
	return _c
}

func (_c *ExecutorAPIMock_LoadRunnerJobs_Call) Return(_a0 []*api.Job, _a1 error) *ExecutorAPIMock_LoadRunnerJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorAPIMock_LoadRunnerJobs_Call) RunAndReturn(run func(dto.EnvironmentID) ([]*api.Job, error)) *ExecutorAPIMock_LoadRunnerJobs_Call {
	_c.Call.Return(run)
	return _c
}

// LoadRunnerPortMappings provides a mock function with given fields: runnerID
func (_m *ExecutorAPIMock) LoadRunnerPortMappings(runnerID string) ([]api.PortMapping, error) {
	ret := _m.Called(runnerID)

	var r0 []api.PortMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.PortMapping, error)); ok {
		return rf(runnerID)
	}
	if rf, ok := ret.Get(0).(func(string) []api.PortMapping); ok {
		r0 = rf(runnerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.PortMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runnerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_LoadRunnerPortMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadRunnerPortMappings'
type ExecutorAPIMock_LoadRunnerPortMappings_Call struct {
	*mock.Call
}

// LoadRunnerPortMappings is a helper method to define mock.On call
//   - runnerID string
func (_e *ExecutorAPIMock_Expecter) LoadRunnerPortMappings(runnerID interface{}) *ExecutorAPIMock_LoadRunnerPortMappings_Call {
	return &ExecutorAPIMock_LoadRunnerPortMappings_Call{Call: _e.mock.On("LoadRunnerPortMappings", runnerID)}
}

func (_c *ExecutorAPIMock_LoadRunnerPortMappings_Call) Run(run func(runnerID string)) *ExecutorAPIMock_LoadRunnerPortMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutorAPIMock_LoadRunnerPortMappings_Call) Return(_a0 []api.PortMapping, _a1 error) *ExecutorAPIMock_LoadRunnerPortMappings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorAPIMock_LoadRunnerPortMappings_Call) RunAndReturn(run func(string) ([]api.PortMapping, error)) *ExecutorAPIMock_LoadRunnerPortMappings_Call {
	_c.Call.Return(run)
	return _c
}

// MarkRunnerAsUsed provides a mock function with given fields: runnerID, duration
func (_m *ExecutorAPIMock) MarkRunnerAsUsed(runnerID string, duration int) error {
	ret := _m.Called(runnerID, duration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(runnerID, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutorAPIMock_MarkRunnerAsUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkRunnerAsUsed'
type ExecutorAPIMock_MarkRunnerAsUsed_Call struct {
	*mock.Call
}

// MarkRunnerAsUsed is a helper method to define mock.On call
//   - runnerID string
//   - duration int
func (_e *ExecutorAPIMock_Expecter) MarkRunnerAsUsed(runnerID interface{}, duration interface{}) *ExecutorAPIMock_MarkRunnerAsUsed_Call {
	return &ExecutorAPIMock_MarkRunnerAsUsed_Call{Call: _e.mock.On("MarkRunnerAsUsed", runnerID, duration)}
}

func (_c *ExecutorAPIMock_MarkRunnerAsUsed_Call) Run(run func(runnerID string, duration int)) *ExecutorAPIMock_MarkRunnerAsUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *ExecutorAPIMock_MarkRunnerAsUsed_Call) Return(_a0 error) *ExecutorAPIMock_MarkRunnerAsUsed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutorAPIMock_MarkRunnerAsUsed_Call) RunAndReturn(run func(string, int) error) *ExecutorAPIMock_MarkRunnerAsUsed_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorEvaluation provides a mock function with given fields: evaluationID, ctx
func (_m *ExecutorAPIMock) MonitorEvaluation(evaluationID string, ctx context.Context) error {
	ret := _m.Called(evaluationID, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(evaluationID, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutorAPIMock_MonitorEvaluation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorEvaluation'
type ExecutorAPIMock_MonitorEvaluation_Call struct {
	*mock.Call
}

// MonitorEvaluation is a helper method to define mock.On call
//   - evaluationID string
//   - ctx context.Context
func (_e *ExecutorAPIMock_Expecter) MonitorEvaluation(evaluationID interface{}, ctx interface{}) *ExecutorAPIMock_MonitorEvaluation_Call {
	return &ExecutorAPIMock_MonitorEvaluation_Call{Call: _e.mock.On("MonitorEvaluation", evaluationID, ctx)}
}

func (_c *ExecutorAPIMock_MonitorEvaluation_Call) Run(run func(evaluationID string, ctx context.Context)) *ExecutorAPIMock_MonitorEvaluation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(context.Context))
	})
	return _c
}

func (_c *ExecutorAPIMock_MonitorEvaluation_Call) Return(_a0 error) *ExecutorAPIMock_MonitorEvaluation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutorAPIMock_MonitorEvaluation_Call) RunAndReturn(run func(string, context.Context) error) *ExecutorAPIMock_MonitorEvaluation_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterNomadJob provides a mock function with given fields: job
func (_m *ExecutorAPIMock) RegisterNomadJob(job *api.Job) (string, error) {
	ret := _m.Called(job)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.Job) (string, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(*api.Job) string); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*api.Job) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_RegisterNomadJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNomadJob'
type ExecutorAPIMock_RegisterNomadJob_Call struct {
	*mock.Call
}

// RegisterNomadJob is a helper method to define mock.On call
//   - job *api.Job
func (_e *ExecutorAPIMock_Expecter) RegisterNomadJob(job interface{}) *ExecutorAPIMock_RegisterNomadJob_Call {
	return &ExecutorAPIMock_RegisterNomadJob_Call{Call: _e.mock.On("RegisterNomadJob", job)}
}

func (_c *ExecutorAPIMock_RegisterNomadJob_Call) Run(run func(job *api.Job)) *ExecutorAPIMock_RegisterNomadJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.Job))
	})
	return _c
}

func (_c *ExecutorAPIMock_RegisterNomadJob_Call) Return(_a0 string, _a1 error) *ExecutorAPIMock_RegisterNomadJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorAPIMock_RegisterNomadJob_Call) RunAndReturn(run func(*api.Job) (string, error)) *ExecutorAPIMock_RegisterNomadJob_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRunnerJob provides a mock function with given fields: template
func (_m *ExecutorAPIMock) RegisterRunnerJob(template *api.Job) error {
	ret := _m.Called(template)

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.Job) error); ok {
		r0 = rf(template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutorAPIMock_RegisterRunnerJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRunnerJob'
type ExecutorAPIMock_RegisterRunnerJob_Call struct {
	*mock.Call
}

// RegisterRunnerJob is a helper method to define mock.On call
//   - template *api.Job
func (_e *ExecutorAPIMock_Expecter) RegisterRunnerJob(template interface{}) *ExecutorAPIMock_RegisterRunnerJob_Call {
	return &ExecutorAPIMock_RegisterRunnerJob_Call{Call: _e.mock.On("RegisterRunnerJob", template)}
}

func (_c *ExecutorAPIMock_RegisterRunnerJob_Call) Run(run func(template *api.Job)) *ExecutorAPIMock_RegisterRunnerJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.Job))
	})
	return _c
}

func (_c *ExecutorAPIMock_RegisterRunnerJob_Call) Return(_a0 error) *ExecutorAPIMock_RegisterRunnerJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutorAPIMock_RegisterRunnerJob_Call) RunAndReturn(run func(*api.Job) error) *ExecutorAPIMock_RegisterRunnerJob_Call {
	_c.Call.Return(run)
	return _c
}

// SetJobScale provides a mock function with given fields: jobID, count, reason
func (_m *ExecutorAPIMock) SetJobScale(jobID string, count uint, reason string) error {
	ret := _m.Called(jobID, count, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, string) error); ok {
		r0 = rf(jobID, count, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutorAPIMock_SetJobScale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJobScale'
type ExecutorAPIMock_SetJobScale_Call struct {
	*mock.Call
}

// SetJobScale is a helper method to define mock.On call
//   - jobID string
//   - count uint
//   - reason string
func (_e *ExecutorAPIMock_Expecter) SetJobScale(jobID interface{}, count interface{}, reason interface{}) *ExecutorAPIMock_SetJobScale_Call {
	return &ExecutorAPIMock_SetJobScale_Call{Call: _e.mock.On("SetJobScale", jobID, count, reason)}
}

func (_c *ExecutorAPIMock_SetJobScale_Call) Run(run func(jobID string, count uint, reason string)) *ExecutorAPIMock_SetJobScale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint), args[2].(string))
	})
	return _c
}

func (_c *ExecutorAPIMock_SetJobScale_Call) Return(err error) *ExecutorAPIMock_SetJobScale_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutorAPIMock_SetJobScale_Call) RunAndReturn(run func(string, uint, string) error) *ExecutorAPIMock_SetJobScale_Call {
	_c.Call.Return(run)
	return _c
}

// WatchEventStream provides a mock function with given fields: ctx, callbacks
func (_m *ExecutorAPIMock) WatchEventStream(ctx context.Context, callbacks *AllocationProcessoring) error {
	ret := _m.Called(ctx, callbacks)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *AllocationProcessoring) error); ok {
		r0 = rf(ctx, callbacks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutorAPIMock_WatchEventStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchEventStream'
type ExecutorAPIMock_WatchEventStream_Call struct {
	*mock.Call
}

// WatchEventStream is a helper method to define mock.On call
//   - ctx context.Context
//   - callbacks *AllocationProcessoring
func (_e *ExecutorAPIMock_Expecter) WatchEventStream(ctx interface{}, callbacks interface{}) *ExecutorAPIMock_WatchEventStream_Call {
	return &ExecutorAPIMock_WatchEventStream_Call{Call: _e.mock.On("WatchEventStream", ctx, callbacks)}
}

func (_c *ExecutorAPIMock_WatchEventStream_Call) Run(run func(ctx context.Context, callbacks *AllocationProcessoring)) *ExecutorAPIMock_WatchEventStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*AllocationProcessoring))
	})
	return _c
}

func (_c *ExecutorAPIMock_WatchEventStream_Call) Return(_a0 error) *ExecutorAPIMock_WatchEventStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutorAPIMock_WatchEventStream_Call) RunAndReturn(run func(context.Context, *AllocationProcessoring) error) *ExecutorAPIMock_WatchEventStream_Call {
	_c.Call.Return(run)
	return _c
}

// allocation provides a mock function with given fields: jobID
func (_m *ExecutorAPIMock) allocation(jobID string) (*api.Allocation, error) {
	ret := _m.Called(jobID)

	var r0 *api.Allocation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Allocation, error)); ok {
		return rf(jobID)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Allocation); ok {
		r0 = rf(jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Allocation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_allocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'allocation'
type ExecutorAPIMock_allocation_Call struct {
	*mock.Call
}

// allocation is a helper method to define mock.On call
//   - jobID string
func (_e *ExecutorAPIMock_Expecter) allocation(jobID interface{}) *ExecutorAPIMock_allocation_Call {
	return &ExecutorAPIMock_allocation_Call{Call: _e.mock.On("allocation", jobID)}
}

func (_c *ExecutorAPIMock_allocation_Call) Run(run func(jobID string)) *ExecutorAPIMock_allocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutorAPIMock_allocation_Call) Return(_a0 *api.Allocation, _a1 error) *ExecutorAPIMock_allocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorAPIMock_allocation_Call) RunAndReturn(run func(string) (*api.Allocation, error)) *ExecutorAPIMock_allocation_Call {
	_c.Call.Return(run)
	return _c
}

// init provides a mock function with given fields: nomadConfig
func (_m *ExecutorAPIMock) init(nomadConfig *config.Nomad) error {
	ret := _m.Called(nomadConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.Nomad) error); ok {
		r0 = rf(nomadConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutorAPIMock_init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'init'
type ExecutorAPIMock_init_Call struct {
	*mock.Call
}

// init is a helper method to define mock.On call
//   - nomadConfig *config.Nomad
func (_e *ExecutorAPIMock_Expecter) init(nomadConfig interface{}) *ExecutorAPIMock_init_Call {
	return &ExecutorAPIMock_init_Call{Call: _e.mock.On("init", nomadConfig)}
}

func (_c *ExecutorAPIMock_init_Call) Run(run func(nomadConfig *config.Nomad)) *ExecutorAPIMock_init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Nomad))
	})
	return _c
}

func (_c *ExecutorAPIMock_init_Call) Return(err error) *ExecutorAPIMock_init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutorAPIMock_init_Call) RunAndReturn(run func(*config.Nomad) error) *ExecutorAPIMock_init_Call {
	_c.Call.Return(run)
	return _c
}

// job provides a mock function with given fields: jobID
func (_m *ExecutorAPIMock) job(jobID string) (*api.Job, error) {
	ret := _m.Called(jobID)

	var r0 *api.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Job, error)); ok {
		return rf(jobID)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Job); ok {
		r0 = rf(jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_job_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'job'
type ExecutorAPIMock_job_Call struct {
	*mock.Call
}

// job is a helper method to define mock.On call
//   - jobID string
func (_e *ExecutorAPIMock_Expecter) job(jobID interface{}) *ExecutorAPIMock_job_Call {
	return &ExecutorAPIMock_job_Call{Call: _e.mock.On("job", jobID)}
}

func (_c *ExecutorAPIMock_job_Call) Run(run func(jobID string)) *ExecutorAPIMock_job_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutorAPIMock_job_Call) Return(job *api.Job, err error) *ExecutorAPIMock_job_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *ExecutorAPIMock_job_Call) RunAndReturn(run func(string) (*api.Job, error)) *ExecutorAPIMock_job_Call {
	_c.Call.Return(run)
	return _c
}

// listJobs provides a mock function with given fields: prefix
func (_m *ExecutorAPIMock) listJobs(prefix string) ([]*api.JobListStub, error) {
	ret := _m.Called(prefix)

	var r0 []*api.JobListStub
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.JobListStub, error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.JobListStub); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.JobListStub)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorAPIMock_listJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'listJobs'
type ExecutorAPIMock_listJobs_Call struct {
	*mock.Call
}

// listJobs is a helper method to define mock.On call
//   - prefix string
func (_e *ExecutorAPIMock_Expecter) listJobs(prefix interface{}) *ExecutorAPIMock_listJobs_Call {
	return &ExecutorAPIMock_listJobs_Call{Call: _e.mock.On("listJobs", prefix)}
}

func (_c *ExecutorAPIMock_listJobs_Call) Run(run func(prefix string)) *ExecutorAPIMock_listJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutorAPIMock_listJobs_Call) Return(allocationListStub []*api.JobListStub, err error) *ExecutorAPIMock_listJobs_Call {
	_c.Call.Return(allocationListStub, err)
	return _c
}

func (_c *ExecutorAPIMock_listJobs_Call) RunAndReturn(run func(string) ([]*api.JobListStub, error)) *ExecutorAPIMock_listJobs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExecutorAPIMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewExecutorAPIMock creates a new instance of ExecutorAPIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExecutorAPIMock(t mockConstructorTestingTNewExecutorAPIMock) *ExecutorAPIMock {
	mock := &ExecutorAPIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
