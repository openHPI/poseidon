// Code generated by mockery v2.10.0. DO NOT EDIT.

package runner

import (
	dto "github.com/openHPI/poseidon/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// ManagerMock is an autogenerated mock type for the Manager type
type ManagerMock struct {
	mock.Mock
}

// Claim provides a mock function with given fields: id, duration
func (_m *ManagerMock) Claim(id dto.EnvironmentID, duration int) (Runner, error) {
	ret := _m.Called(id, duration)

	var r0 Runner
	if rf, ok := ret.Get(0).(func(dto.EnvironmentID, int) Runner); ok {
		r0 = rf(id, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Runner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.EnvironmentID, int) error); ok {
		r1 = rf(id, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: id
func (_m *ManagerMock) DeleteEnvironment(id dto.EnvironmentID) {
	_m.Called(id)
}

// EnvironmentStatistics provides a mock function with given fields:
func (_m *ManagerMock) EnvironmentStatistics() map[dto.EnvironmentID]*dto.StatisticalExecutionEnvironmentData {
	ret := _m.Called()

	var r0 map[dto.EnvironmentID]*dto.StatisticalExecutionEnvironmentData
	if rf, ok := ret.Get(0).(func() map[dto.EnvironmentID]*dto.StatisticalExecutionEnvironmentData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[dto.EnvironmentID]*dto.StatisticalExecutionEnvironmentData)
		}
	}

	return r0
}

// Get provides a mock function with given fields: runnerID
func (_m *ManagerMock) Get(runnerID string) (Runner, error) {
	ret := _m.Called(runnerID)

	var r0 Runner
	if rf, ok := ret.Get(0).(func(string) Runner); ok {
		r0 = rf(runnerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Runner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runnerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironment provides a mock function with given fields: id
func (_m *ManagerMock) GetEnvironment(id dto.EnvironmentID) (ExecutionEnvironment, bool) {
	ret := _m.Called(id)

	var r0 ExecutionEnvironment
	if rf, ok := ret.Get(0).(func(dto.EnvironmentID) ExecutionEnvironment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ExecutionEnvironment)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(dto.EnvironmentID) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// HasNextHandler provides a mock function with given fields:
func (_m *ManagerMock) HasNextHandler() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListEnvironments provides a mock function with given fields:
func (_m *ManagerMock) ListEnvironments() []ExecutionEnvironment {
	ret := _m.Called()

	var r0 []ExecutionEnvironment
	if rf, ok := ret.Get(0).(func() []ExecutionEnvironment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ExecutionEnvironment)
		}
	}

	return r0
}

// Load provides a mock function with given fields:
func (_m *ManagerMock) Load() {
	_m.Called()
}

// NextHandler provides a mock function with given fields:
func (_m *ManagerMock) NextHandler() AccessorHandler {
	ret := _m.Called()

	var r0 AccessorHandler
	if rf, ok := ret.Get(0).(func() AccessorHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(AccessorHandler)
		}
	}

	return r0
}

// Return provides a mock function with given fields: r
func (_m *ManagerMock) Return(r Runner) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(Runner) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNextHandler provides a mock function with given fields: m
func (_m *ManagerMock) SetNextHandler(m AccessorHandler) {
	_m.Called(m)
}

// StoreEnvironment provides a mock function with given fields: environment
func (_m *ManagerMock) StoreEnvironment(environment ExecutionEnvironment) {
	_m.Called(environment)
}
