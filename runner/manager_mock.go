// Code generated by mockery v2.8.0. DO NOT EDIT.

package runner

import mock "github.com/stretchr/testify/mock"

// ManagerMock is an autogenerated mock type for the Manager type
type ManagerMock struct {
	mock.Mock
}

// Claim provides a mock function with given fields: id
func (_m *ManagerMock) Claim(id EnvironmentId) (Runner, error) {
	ret := _m.Called(id)

	var r0 Runner
	if rf, ok := ret.Get(0).(func(EnvironmentId) Runner); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Runner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(EnvironmentId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnvironmentExists provides a mock function with given fields: id
func (_m *ManagerMock) EnvironmentExists(id EnvironmentId) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EnvironmentId) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: runnerId
func (_m *ManagerMock) Get(runnerId string) (Runner, error) {
	ret := _m.Called(runnerId)

	var r0 Runner
	if rf, ok := ret.Get(0).(func(string) Runner); ok {
		r0 = rf(runnerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Runner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runnerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterEnvironment provides a mock function with given fields: environmentId, nomadJobId, desiredIdleRunnersCount
func (_m *ManagerMock) RegisterEnvironment(environmentId EnvironmentId, nomadJobId NomadJobId, desiredIdleRunnersCount uint) {
	_m.Called(environmentId, nomadJobId, desiredIdleRunnersCount)
}

// Return provides a mock function with given fields: r
func (_m *ManagerMock) Return(r Runner) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(Runner) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
