default:
  image: golang:latest

stages:
  - build
  - lint
  - test
  - docker
  - e2e
  - deploy
  - cleanup

variables:
  DOCKER_TLS_CERTDIR: ""
  NOMAD_SLUG: $NOMAD_PREFIX-$CI_ENVIRONMENT_SLUG
  IMAGE_NAME_ENV: $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME/$CI_COMMIT_REF_SLUG:$CI_PIPELINE_IID
  IMAGE_NAME_GENERAL: $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME/$CI_COMMIT_REF_SLUG:latest
  NOMAD_CI_IMAGE_NAME_ENV: $DOCKER_REGISTRY/nomad-ci/$CI_COMMIT_REF_SLUG:$CI_PIPELINE_IID
  NOMAD_CI_IMAGE_NAME_GENERAL: $DOCKER_REGISTRY/nomad-ci/$CI_COMMIT_REF_SLUG:latest
  NOMAD_CI_BASE_IMAGE: $DOCKER_REGISTRY/nomad-ci/main:latest

compile:
  stage: build
  needs: []
  variables:
    CGO_ENABLED: 0
  script:
    - go build -o poseidon
  artifacts:
    paths:
      - poseidon
    expire_in: 1 week

golangci-lint:
  stage: lint
  needs: []
  image: golangci/golangci-lint:latest
  script:
    - golangci-lint run

golint:
  stage: lint
  needs: []
  script:
    - go get -u golang.org/x/lint/golint
    - golint -set_exit_status

test:
  stage: test
  needs: []
  script:
    - go test $(go list ./... | grep -v /e2e_tests) -v -coverprofile coverage.cov
    - go tool cover -func=coverage.cov
    - go tool cover -html=coverage.cov -o coverage_unit.html
  artifacts:
    paths:
      - coverage_unit.html
    expire_in: 1 week
    expose_as: coverageReport

dockerimage:
  stage: docker
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  needs:
    - compile
  script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
    # Prevent pull rate limit but still have normal alpine image in Dockerfile
    - docker pull $DOCKER_REGISTRY/library/alpine:latest
    - docker tag $DOCKER_REGISTRY/library/alpine:latest alpine:latest
    - docker build -t $IMAGE_NAME_ENV .
    - docker push $IMAGE_NAME_ENV
    - docker tag $IMAGE_NAME_ENV $IMAGE_NAME_GENERAL
    - docker push $IMAGE_NAME_GENERAL

nomadimage:
  stage: docker
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  needs: []
  script:
    - cd ci
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
    - docker pull $DOCKER_REGISTRY/library/golang:latest
    - docker tag $DOCKER_REGISTRY/library/golang:latest golang:latest
    # Pull base image to avoid rebuilding every pipeline if nothing changed, prioritize image from branch
    - docker pull $NOMAD_CI_IMAGE_NAME_GENERAL || docker pull $NOMAD_CI_BASE_IMAGE || true
    - docker build --cache-from $NOMAD_CI_BASE_IMAGE --cache-from $NOMAD_CI_IMAGE_NAME_GENERAL -t $NOMAD_CI_IMAGE_NAME_ENV -t $NOMAD_CI_IMAGE_NAME_GENERAL .
    - docker push $NOMAD_CI_IMAGE_NAME_ENV
    - docker push $NOMAD_CI_IMAGE_NAME_GENERAL


test_e2e:
  image: $NOMAD_CI_IMAGE_NAME_ENV
  stage: e2e
  needs:
    - compile
    - job: nomadimage
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"
  script:
    # Avoid docker pull limit
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
    - docker pull $DOCKER_REGISTRY/openhpi/co_execenv_python:3.8
    - docker tag $DOCKER_REGISTRY/openhpi/co_execenv_python:3.8 openhpi/co_execenv_python:3.8
    # Setup own Nomad cluster and wait for startup
    - export NOMAD_ADDR=http://localhost:4646
    - nomad agent -dev -log-level=WARN &
    - sleep 5
    # Setup Nomad job and wait for it
    - nomad run ci/python.nomad
    - sleep 5
    # Start Poseidon and wait for it
    - ./poseidon &
    - sleep 20
    # Start tests
    - go test ./e2e_tests -v


.start_deployment: &start_deployment
  image: $NOMAD_CI_IMAGE_NAME_ENV
  stage: deploy
  needs:
    - job: dockerimage
      artifacts: false
    - job: nomadimage
  script:
    # Only replace set env vars
    - envsubst "$(env | sed -e 's/=.*//' -e 's/^/\$/g')" < ci/api.tpl.nomad > ci/api.nomad
    # Make sure to set NOMAD_ADDR, NOMAD_SKIP_VERIFY and NOMAD_TOKEN env vars in CI settings appropriately
    - nomad validate ci/api.nomad
    # nomad plan returns 1 if allocation is created or destroyed which is what we want here
    - nomad plan     ci/api.nomad || [ $? == 1 ]
    - nomad-run-and-wait ci/api.nomad
  artifacts:
    paths:
      - ci/api.nomad
    expire_in: 1 month
    expose_as: api-nomad

deploy_review:
  <<: *start_deployment
  variables:
    HOSTNAME: $CI_ENVIRONMENT_SLUG.$BASE_DOMAIN
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: http://$CI_ENVIRONMENT_SLUG.$BASE_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - main

stop_review:
  # See:
  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/Deploy.gitlab-ci.yml
  stage: cleanup
  image: $NOMAD_CI_IMAGE_NAME_ENV
  variables:
    GIT_STRATEGY: none
  script:
    - nomad stop $NOMAD_SLUG
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop
  needs: []
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
      when: manual

deploy_staging:
  <<: *start_deployment
  variables:
    NOMAD_SLUG: $NOMAD_PREFIX-staging
    HOSTNAME: staging.$BASE_DOMAIN
  environment:
    name: staging
    url: http://staging.$BASE_DOMAIN
  only:
    - main

deploy_production:
  <<: *start_deployment
  variables:
    NOMAD_SLUG: $NOMAD_PREFIX-production
    HOSTNAME: $PRODUCTION_URL
  environment:
    name: production
    url: https://$PRODUCTION_URL
  only:
    - main
  when: manual
