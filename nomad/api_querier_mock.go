// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package nomad

import (
	context "context"

	api "github.com/hashicorp/nomad/api"

	io "io"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// apiQuerierMock is an autogenerated mock type for the apiQuerier type
type apiQuerierMock struct {
	mock.Mock
}

// DeleteRunner provides a mock function with given fields: runnerId
func (_m *apiQuerierMock) DeleteRunner(runnerId string) error {
	ret := _m.Called(runnerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(runnerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EvaluationStream provides a mock function with given fields: evalID, ctx
func (_m *apiQuerierMock) EvaluationStream(evalID string, ctx context.Context) (<-chan *api.Events, error) {
	ret := _m.Called(evalID, ctx)

	var r0 <-chan *api.Events
	if rf, ok := ret.Get(0).(func(string, context.Context) <-chan *api.Events); ok {
		r0 = rf(evalID, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *api.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(evalID, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteCommand provides a mock function with given fields: allocationID, ctx, command, stdin, stdout, stderr
func (_m *apiQuerierMock) ExecuteCommand(allocationID string, ctx context.Context, command []string, stdin io.Reader, stdout io.Writer, stderr io.Writer) (int, error) {
	ret := _m.Called(allocationID, ctx, command, stdin, stdout, stderr)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, context.Context, []string, io.Reader, io.Writer, io.Writer) int); ok {
		r0 = rf(allocationID, ctx, command, stdin, stdout, stderr)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context, []string, io.Reader, io.Writer, io.Writer) error); ok {
		r1 = rf(allocationID, ctx, command, stdin, stdout, stderr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobScale provides a mock function with given fields: jobId
func (_m *apiQuerierMock) JobScale(jobId string) (int, error) {
	ret := _m.Called(jobId)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(jobId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadJobList provides a mock function with given fields:
func (_m *apiQuerierMock) LoadJobList() ([]*api.JobListStub, error) {
	ret := _m.Called()

	var r0 []*api.JobListStub
	if rf, ok := ret.Get(0).(func() []*api.JobListStub); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.JobListStub)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNomadJob provides a mock function with given fields: job
func (_m *apiQuerierMock) RegisterNomadJob(job *api.Job) (string, error) {
	ret := _m.Called(job)

	var r0 string
	if rf, ok := ret.Get(0).(func(*api.Job) string); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*api.Job) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetJobScale provides a mock function with given fields: jobId, count, reason
func (_m *apiQuerierMock) SetJobScale(jobId string, count int, reason string) error {
	ret := _m.Called(jobId, count, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, string) error); ok {
		r0 = rf(jobId, count, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// init provides a mock function with given fields: nomadURL, nomadNamespace
func (_m *apiQuerierMock) init(nomadURL *url.URL, nomadNamespace string) error {
	ret := _m.Called(nomadURL, nomadNamespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(*url.URL, string) error); ok {
		r0 = rf(nomadURL, nomadNamespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// loadRunners provides a mock function with given fields: jobId
func (_m *apiQuerierMock) loadRunners(jobId string) ([]*api.AllocationListStub, error) {
	ret := _m.Called(jobId)

	var r0 []*api.AllocationListStub
	if rf, ok := ret.Get(0).(func(string) []*api.AllocationListStub); ok {
		r0 = rf(jobId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.AllocationListStub)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
